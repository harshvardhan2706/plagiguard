{"ast":null,"code":"import axios from 'axios';\n\n// Define the base URL for the API\nconst BASE_URL = 'http://localhost:8085';\n\n// Create axios instance with custom config\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 60000,\n  // 60 second timeout\n  validateStatus: function (status) {\n    return status >= 200 && status < 500; // Handle all responses\n  },\n  // Retry configuration\n  retry: 3,\n  retryDelay: retryCount => {\n    return retryCount * 1000; // time interval between retries\n  }\n});\n\n// Add request interceptor to handle authentication\napi.interceptors.request.use(config => {\n  var _config$url;\n  // Get the tokens from localStorage\n  const admin = JSON.parse(localStorage.getItem('admin') || '{}');\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n\n  // Clone the headers to avoid mutation\n  const headers = {\n    ...config.headers\n  };\n\n  // Send admin token for admin routes, user token for other routes\n  if ((_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes('/admin/') && admin !== null && admin !== void 0 && admin.token) {\n    headers.Authorization = `Bearer ${admin.token}`;\n  } else if (user !== null && user !== void 0 && user.token) {\n    headers.Authorization = `Bearer ${user.token}`;\n  }\n\n  // For FormData requests, remove Content-Type to let browser set it\n  if (config.data instanceof FormData) {\n    delete headers['Content-Type'];\n  }\n\n  // Merge headers back into config\n  config.headers = headers;\n\n  // Debug logging only in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Request:', {\n      url: config.baseURL + config.url,\n      method: config.method,\n      headers: {\n        ...headers,\n        Authorization: headers.Authorization ? '[REDACTED]' : undefined\n      },\n      data: config.data instanceof FormData ? '[FormData]' : config.data\n    });\n  }\n  return config;\n}, error => {\n  console.error('Request configuration error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If we don't have a config, we can't retry\n  if (!originalRequest) {\n    return Promise.reject(error);\n  }\n\n  // Don't retry these status codes\n  const noRetryStatuses = [400, 401, 403, 404, 422];\n\n  // Handle authentication errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    var _originalRequest$url;\n    if ((_originalRequest$url = originalRequest.url) !== null && _originalRequest$url !== void 0 && _originalRequest$url.includes('/admin/')) {\n      localStorage.removeItem('admin');\n      window.location.href = '/admin/login';\n    } else {\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n\n  // Handle retry logic\n  if (error.response && !noRetryStatuses.includes(error.response.status) && !originalRequest._retry && originalRequest.retry > 0) {\n    originalRequest._retry = true;\n    originalRequest.retry--;\n\n    // Wait before retrying\n    await new Promise(resolve => setTimeout(resolve, originalRequest.retryDelay(originalRequest.retry)));\n\n    // Retry the request\n    return api(originalRequest);\n  }\n\n  // Log error details in development\n  if (process.env.NODE_ENV === 'development') {\n    var _error$response2, _error$response3;\n    console.error('API Error:', {\n      url: originalRequest.url,\n      method: originalRequest.method,\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n      data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n      message: error.message\n    });\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","headers","timeout","validateStatus","status","retry","retryDelay","retryCount","interceptors","request","use","config","_config$url","admin","JSON","parse","localStorage","getItem","user","url","includes","token","Authorization","data","FormData","process","env","NODE_ENV","console","log","method","undefined","error","Promise","reject","response","_error$response","originalRequest","noRetryStatuses","_originalRequest$url","removeItem","window","location","href","_retry","resolve","setTimeout","_error$response2","_error$response3","message"],"sources":["C:/Users/hvard/plagiguard/plagiguard-frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define the base URL for the API\r\nconst BASE_URL = 'http://localhost:8085';\r\n\r\n// Create axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },  timeout: 60000, // 60 second timeout\r\n  validateStatus: function (status) {\r\n    return status >= 200 && status < 500; // Handle all responses\r\n  },\r\n  // Retry configuration\r\n  retry: 3,\r\n  retryDelay: (retryCount) => {\r\n    return retryCount * 1000; // time interval between retries\r\n  }\r\n});\r\n\r\n// Add request interceptor to handle authentication\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get the tokens from localStorage\r\n    const admin = JSON.parse(localStorage.getItem('admin') || '{}');\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n\r\n    // Clone the headers to avoid mutation\r\n    const headers = { ...config.headers };\r\n\r\n    // Send admin token for admin routes, user token for other routes\r\n    if (config.url?.includes('/admin/') && admin?.token) {\r\n      headers.Authorization = `Bearer ${admin.token}`;\r\n    } else if (user?.token) {\r\n      headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n\r\n    // For FormData requests, remove Content-Type to let browser set it\r\n    if (config.data instanceof FormData) {\r\n      delete headers['Content-Type'];\r\n    }\r\n\r\n    // Merge headers back into config\r\n    config.headers = headers;\r\n\r\n    // Debug logging only in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('Request:', {\r\n        url: config.baseURL + config.url,\r\n        method: config.method,\r\n        headers: { ...headers, Authorization: headers.Authorization ? '[REDACTED]' : undefined },\r\n        data: config.data instanceof FormData ? '[FormData]' : config.data\r\n      });\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request configuration error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If we don't have a config, we can't retry\r\n    if (!originalRequest) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Don't retry these status codes\r\n    const noRetryStatuses = [400, 401, 403, 404, 422];\r\n    \r\n    // Handle authentication errors\r\n    if (error.response?.status === 401) {\r\n      if (originalRequest.url?.includes('/admin/')) {\r\n        localStorage.removeItem('admin');\r\n        window.location.href = '/admin/login';\r\n      } else {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Handle retry logic\r\n    if (\r\n      error.response &&\r\n      !noRetryStatuses.includes(error.response.status) &&\r\n      !originalRequest._retry &&\r\n      originalRequest.retry > 0\r\n    ) {\r\n      originalRequest._retry = true;\r\n      originalRequest.retry--;\r\n\r\n      // Wait before retrying\r\n      await new Promise(resolve => \r\n        setTimeout(resolve, originalRequest.retryDelay(originalRequest.retry))\r\n      );\r\n\r\n      // Retry the request\r\n      return api(originalRequest);\r\n    }\r\n\r\n    // Log error details in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.error('API Error:', {\r\n        url: originalRequest.url,\r\n        method: originalRequest.method,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        message: error.message\r\n      });\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}